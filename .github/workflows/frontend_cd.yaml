name: Frontend Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test -- --watchAll=false

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Build frontend
        run: npm run build

  docker:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.FE_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          REACT_APP_MOVIE_API_URL: ${{ vars.REACT_APP_MOVIE_API_URL }}
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  deploy:
    runs-on: ubuntu-latest
    needs: [docker]
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ vars.EKS_CLUSTER_NAME }}
      - name: Create aws-auth ConfigMap if missing
        run: |
          # Check if aws-auth exists, if not create it
          if ! kubectl get configmap aws-auth -n kube-system; then
            echo "Creating aws-auth ConfigMap..."
            # Get current AWS account ID
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            # Get current IAM user/role
            USER_ARN=$(aws sts get-caller-identity --query Arn --output text)
            
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: aws-auth
              namespace: kube-system
            data:
              mapUsers: |
                - userarn: $USER_ARN
                  username: github-actions
                  groups:
                    - system:masters
            EOF
          else
            echo "aws-auth ConfigMap already exists"
          fi
      - name: Set up kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: 'v5.2.1'
      - name: Log in to Amazon ECR
        id: login-ecr-extract
        uses: aws-actions/amazon-ecr-login@v2
      - name: Update image in Kubernetes manifests #flabbergasted button
        run: |
          DOCKER_IMAGE_URI=${{ steps.login-ecr-extract.outputs.registry }}/${{ vars.FE_ECR_REPOSITORY }}:${{ github.sha }}
          echo "IMAGE_URI: $DOCKER_IMAGE_URI"
          cd k8s && kustomize edit set image frontend=$DOCKER_IMAGE_URI 
          
      - name: Apply Kubernetes manifests
        run: |
          cd k8s && kustomize build | kubectl apply -f - --validate=false
      
